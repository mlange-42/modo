{"/modo/guide/":{"data":{"":"This guide explains how to use ModoðŸ§¯â€™s:\nInstallation â€” Installation options for ModoðŸ§¯. Setup â€” Setting up a MojoðŸ”¥ project for ModoðŸ§¯. Commands â€” Available ModoðŸ§¯ commands. Configuration â€” The modo.yaml file and command line flags. Output formats â€” ModoðŸ§¯â€™s output formats. Features â€” ModoðŸ§¯â€™s features beyond generating Markdown. "},"title":"User guide"},"/modo/guide/commands/":{"data":{"":"","build#\u003ccode\u003ebuild\u003c/code\u003e":"","clean#\u003ccode\u003eclean\u003c/code\u003e":"ModoðŸ§¯ uses commands to structure the command line interface. Most commands also accept flags. These are covered in chapter Configuration.\nCommands are generally used like this:\nmodo \u003ccommand\u003e [ARGS] [FLAGS] init Command init serves to prepare an existing MojoðŸ”¥ project for instant usage with ModoðŸ§¯ and a static site generator (SSG). It takes a mandatory argument for the intended output format. Details are covered in chapter Project setup.\nbuild Command build builds documentation from mojo doc JSON files and additional Markdown files. Optionally, it also extracts doc-tests. Takes an optional path argument for the project to build. See chapter Configuration for details.\ntest Command test extracts doc-tests mojo doc JSON files and additional Markdown files. Takes an optional path argument for the project to extract tests from. See chapter Configuration for details.\nclean Command clean removes Markdown and test files created by ModoðŸ§¯. Takes an optional path argument for the project to clean. This is particularly useful to get rid of old artifacts after moving, removing or renaming documentation files or API members.","init#\u003ccode\u003einit\u003c/code\u003e":"","test#\u003ccode\u003etest\u003c/code\u003e":""},"title":"Commands"},"/modo/guide/config/":{"data":{"":"ModoðŸ§¯ can run based on a config file or standalone.","cli-flags#CLI flags":"Most command line flags overwrite config file settings. These are not listed here explicitly. For details, see the config reference. There are, however, a few special flags that are useful to trigger different behaviour when working in different environments. These flags are available for both build and test command.\n--config, -c\nUse an alternative config file. Available for all commands, incl. init and clean.\n--watch, -W\nRe-run on changes of sources and documentation files. Disables all post-processing scripts after running them once. Together with the watch mode of your SSG (e.g. Hugo), this allows to preview changes in a web browser instantly.\n--bare, -B\nDonâ€™t run pre- and post-processing scripts. May be useful when working in an environment where MojoðŸ”¥ is not available.\n--strict, -S\nExits with error on any warnings. Useful to ensure flawless docs in a CI.\n--dry-run, -D\nDry-run without any file output. Useful for fast tests. Disables all post-processing scripts.","config-file#Config file":"A ModoðŸ§¯ project is defined by a file modo.yaml. This file contains the complete configuration for the commands build and test. The modo.yaml is usually created with the command init (see project setup). The typical content of the generated file is shown at the bottom of this page.\nWhen modo build or modo test are executed in a folder containing a modo.yaml, the file is used for configuration and no command line flags are required:\nmodo build However, command line flags can still be used to overwrite the values that were read from the file. As an example, this is how to turn off warnings for missing docstrings:\nmodo build --report-missing false All config file entries are also exposed as command line flags, except for pre- and post-processing scripts (pre-run, pre-build, pre-test, post-run, post-build, post-test).","config-reference#Config reference":"The code listing below shows the content of modo.yaml as produced by modo init hugo for a package under src/mypkg.\nmodo.yaml# Input files as generated by `mojo doc`. # If a single directory is given, it is processed recursively. input: - docs/src # Source directories to monitor when running in watch mode. source: - src/mypkg # Full URLs of package sources. Used to create source links. source-url: mypkg: https:/github.com/your/project/blob/main/src/mypkg # Output directory. output: docs/site/content # Output directory for doc-tests. # Remove or set to \"\" to disable doc-tests. tests: docs/test # Output format. One of (plain|hugo|mdbook). format: hugo # Re-structure docs according to package re-exports. exports: true # Use shortened cross-ref link labels. short-links: true # Report missing docstings and coverage. report-missing: true # Break with error on any warning. strict: false # Run without generating any output files. dry-run: false # Build for systems that are not case-sensitive regarding file names. # Appends hyphen (-) to capitalized file names. case-insensitive: false # Directories to scan for templates to overwrite builtin templates. templates: [] # Bash scripts to run before build as well as test. pre-run: - | echo Running 'mojo doc'... pixi run mojo doc -o docs/src/mypkg.json src/mypkg echo Done. # Bash scripts to run before build. pre-build: [] # Bash scripts to run before test. # Also runs before build if 'tests' is given. pre-test: [] # Bash scripts to run after test. # Also runs after build if 'tests' is given. post-test: - | echo Running 'mojo test'... pixi run mojo test --sanitize address -D ASSERT=all -I src docs/test echo Done. # Bash scripts to run after build. post-build: [] # Bash scripts to run after build as well as test. post-run: [] ","paths#Paths":"Paths in the config file as well as the directory structure created by the init command are just recommendations. Any other structure is possible, but requires adjustments to the config file, including pre- and post-processing scripts.\nPaths are relative to the location of the file.","standalone#Standalone":"ModoðŸ§¯ can also be used without a modo.yaml config file. If there is no such file in the current directory, an empty configuration is used. Command line flags must be used for any configuration:\nmodo build -i api.json -o docs/ "},"title":"Configuration"},"/modo/guide/features/":{"data":{"":"ModoðŸ§¯â€™s features beyond generating Markdown:\nCross-references â€” Cross-referencing in the API docs. Re-exports â€” Restructure package according to re-exports. Doc-tests â€” Extract doc tests from code examples in the API docs. Inheritance â€” Inherit method docs from parent traits. Bash scripts â€” Configure bash scripts to run before and after processing. Templates â€” Use templates to customize ModoðŸ§¯â€™s output. "},"title":"Features"},"/modo/guide/features/crossrefs/":{"data":{"":"ModoðŸ§¯ supports cross-refs within the documentation of a project. Absolute as well as relative references are supported. Relative references follow MojoðŸ”¥â€™s import syntax, with a leading dot denoting the current module, and further dots navigating upwards.\nSome examples:\nRef Explanation [pkg.mod.A] Absolute reference. [.A] Struct A in the current module. [.A.method] Method method of struct A in the current module. [..mod.A] Struct A in sibling module mod. [.A.method link text] Method method of struct A, with custom text. Leading dots are stripped from the link text if no custom text is given, so .mod.Type becomes mod.Type. With flag --short-links, packages and modules are also stripped, so .mod.Type becomes just Type.\nBesides cross-references, normal Markdown links can be used in doc-strings."},"title":"Cross-references"},"/modo/guide/features/doctests/":{"data":{"":"","full-example#Full example":"","global-blocks#Global blocks":"","hidden-blocks#Hidden blocks":"","markdown-files#Markdown files":"","modo-vs-mojo-test#ModoðŸ§¯ vs. \u003ccode\u003emojo test\u003c/code\u003e":"To keep code examples in docstrings up to date, ModoðŸ§¯ can generate test files for mojo test from them. Doctests are enabled by tests in the modo.yaml or flag --tests. Doctests are enabled by default. Further, the default setup also contains a post-processing script that runs mojo test.\nAlternatively to modo build, ModoðŸ§¯â€™s test command can be used to extract tests without building the Markdown docs:\nmodo test # only extract doctests Tested blocks Code block attributes are used to identify code blocks to be tested. Any block that should be included in the tests needs a doctest identifier:\n```mojo {doctest=\"mytest\"} var a = 0 ``` Multiple code blocks with the same identifier are concatenated.\nHidden blocks Individual blocks can be hidden with hide=true:\n```mojo {doctest=\"mytest\" hide=true} # hidden code block ``` Global blocks Further, for code examples that canâ€™t be put into a test function, global=true can be used:\n```mojo {doctest=\"mytest\" global=true} struct MyStruct: pass ``` Full example Combining multiple code blocks using these attributes allows for flexible tests with imports, hidden setup, teardown and assertions. Here is a full example:\nfn add(a: Int, b: Int) -\u003e Int: \"\"\" Function `add` sums up its arguments. ```mojo {doctest=\"add\" global=true hide=true} from testing import assert_equal ``` ```mojo {doctest=\"add\"} var result = add(1, 2) ``` ```mojo {doctest=\"add\" hide=true} assert_equal(result, 3) ``` \"\"\" return a + b This generates the following docs content:\nFunction add sums up its arguments.\nvar result = add(1, 2) Further, ModoðŸ§¯ creates a test file with this content:\nfrom testing import assert_equal fn test_add() raises: var result = add(1, 2) assert_equal(result, 3) Note that the two code blocks around the box form a doc-test themselves, to ensure that this guide is correct and up to date. Both blocks have the attributes {doctest=\"add\" global=true}, which concatenates them into one test file.\nMarkdown files A completely valid ModoðŸ§¯ use case is a site with not just API docs, but also other documentation. Thus, code examples in Markdown files that are not produced by ModoðŸ§¯ can also be processed for doctests.\nFor that sake, ModoðŸ§¯ can use an entire directory as input, instead of one or more JSON files. The input directory should be structured like the intended output, with API docs folders replaced by mojo doc JSON files. Here is an example for a Hugo site with a user guide and API docs for mypkg:\ndocs src guide _index.md installation.md usage.md _index.md mypkg.json With a directory as input, ModoðŸ§¯ does the following:\nFor each JSON file (.json), generate API docs, extract doctests, and write Markdown to the output folder and tests to the tests folder. For each Markdown (.md) file, extract doctests, and write processed Markdown to the output folder and tests to the tests folder. For any other files, copy them to the output folder. Note that this feature is not available with the mdBook format.\nModoðŸ§¯ vs. mojo test MojoðŸ”¥ can also test code examples directly, see the manualâ€™s section on testing. So why would you want to use ModoðŸ§¯â€™s doc-testing feature?\nFirst and foremost, mojo test will only test code blocks in docstrings, while ModoðŸ§¯ also allows for doc-testing of general Markdown files. Further, ModoðŸ§¯ is probably a bit more flexible and offers more control than mojo test. E.g., multiple tests suites are possible per docstring, and code blocks can be hidden completely where mojo test produces empty code blocks.\nNote that mojo test does not recognize docstrings with attributes (```mojo {...}). This means that code blocks prepared for ModoðŸ§¯â€™s doc-testing are not tested by mojo test. But it also means that you canâ€™t use mojo test if you want to add attributes for your SSG, e.g. for line numbers, line highlights, or other features.\nThe doc-testing features of ModoðŸ§¯ and mojo test can be used in the same project without conflicts.","tested-blocks#Tested blocks":""},"title":"Doc-tests"},"/modo/guide/features/inheritance/":{"data":{"":"When implementing trait methods, documentation of the method in the implementing struct is often redundent. For these cases, ModoðŸ§¯ offers doc inheritance.\nIn the method docstring, reference the parent trait in double square brackets, somewhere in the summary (i.e. in the first sentence). The syntax is the same as for cross-references. See line 14 below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 trait MyTrait: fn do_something(self) -\u003e Int: \"\"\" A method that returns an integer. Returns: An arbitrary integer. \"\"\" ... @value struct MyStruct(MyTrait): fn do_something(self) -\u003e Int: \"\"\"See [[.MyTrait]].\"\"\" return 100 This copies the entire documentation from the traitâ€™s method with the same signature into the structâ€™s method. This includes docs for arguments, parameters, return and raises. Any original docs of the structâ€™s method are replaced completely.\nInheriting documentation is only possible from traits in the same root package."},"title":"Inheritance"},"/modo/guide/features/reexports/":{"data":{"":"In MojoðŸ”¥, package-level re-exports (or rather, imports) can be used to flatten the structure of a package and to shorten import paths for users.\nModoðŸ§¯ can structure documentation output according to re-exports by using exports: true in the config, or flag --exports. However, as we donâ€™t look at the actual code but just mojo doc JSON, these re-exports must be documented in an Exports: section in the package docstring.\nIn a packageâ€™s __init__.mojo, document re-exports like this:\n\"\"\" Package creatures demonstrates Modo re-exports. Exports: - animals.Dog - animals.Cat as Kitten - fungi - plants.vascular - plants.bryophytes.Moss \"\"\" from .animals import Dog, Cat as Kitten from .plants import vascular from .plants.bryophytes import Moss Note that Exports: should not be the first line of the docstring, as it is considered the summary and is not processed.\nWhen processed with --exports, only exported members are included in the documentation.\nRe-exports are processed recursively. Re-exported modules (like plants.vascular) are fully included with all members. Sub-packages (like fungi) need an Exports: section too if they are re-exported as a whole. When directly exporting members from a sub-package (like plants.bryophytes.Moss), the sub-package exports are ignored.\nRenaming (X as Y) can be used like in MojoðŸ”¥ imports. Member names, link paths and cross-reference labels are changed accordingly. Signatures, however, are not changed.\nCross-references should still use the original structure of the package. They are automatically transformed to match the altered structure."},"title":"Re-exports"},"/modo/guide/features/scripts/":{"data":{"":"ModoðŸ§¯ can be configured to automatically run bash scripts before and/or after processing.\nThis feature can be used to run all necessary steps with a single modo build or modo test command. Particularly, mojo doc can be executed before processing, and mojo test after extracting doc-tests.","configuration#Configuration":"The modo.yaml config file provides the following fields for bash scripts:\npre-run: runs before build as well as test. pre-build: runs before build. pre-test: runs before test. Also runs before build if tests is given. post-test: runs after test. Also runs after build if tests is given. post-build: runs after build. post-run: runs after build as well as test. Each of those takes an array of bash scripts. Each bash script can be comprised of multiple commands.\nHere is an example that shows how mojo doc is executed in the default setup before build and test:\n# Bash scripts to run before build as well as test. pre-run: - | echo Running 'mojo doc'... pixi run mojo doc -o docs/src/mypkg.json src/mypkg echo Done. And here is how mojo test is executed in the default setup after doc-tests extraction:\n# Bash scripts to run after test. # Also runs after build if 'tests' is given. post-test: - | echo Running 'mojo test'... pixi run mojo test -I src docs/test echo Done. ","error-trap#Error trap":"Each script starts a new bash process. Each process is initialized with an error trap via set -e. This means that any failing command causes the script to fail with that error.\nTo let errors of individual commands pass, use set +e as the first line of your script.","skipping-scripts#Skipping scripts":"Using the flag --bare (-B), shell commands can be skipped so that only the ModoðŸ§¯ command is executed. This can be useful to skip scripts that are intended for the CI when working locally."},"title":"Bash scripts"},"/modo/guide/features/templates/":{"data":{"":"ModoðŸ§¯ relies heavily on templating. With the option templates in the modo.yaml or flag --templates, custom template folders can be specified to (partially) overwrite the embedded templates. Simply use the same files names, and alter the content. Embedded templates that can be overwritten can be found in folder assets/templates.\nModoðŸ§¯ uses the templating syntax of Go and Hugo. See Goâ€™s text/template docs and Hugoâ€™s Introduction to templating for details.\nAs an example, here is the builtin template for rendering a trait. It uses nested templates for clarity and modularity.\nMojo trait # `{{.Name}}` {{template \"summary\" . -}} {{template \"description\" . -}} {{template \"fields\" . -}} {{template \"parent_traits\" . -}} {{template \"methods\" . -}} Besides changing the page layout and content, templates can also be used to alter the Hugo front matter of individual pages, e.g. to change the document type or to add more information for Hugo."},"title":"Templates"},"/modo/guide/formats/":{"data":{"":"ModoðŸ§¯ generates Markdown files. These files need to be processed further to obtain an HTML site that can be served on GitHub Pages (or elsewhere). ModoðŸ§¯ supports different formats to make this step easier, via the config field format or flag --format.","hugo#Hugo":"With format hugo, ModoðŸ§¯ creates a minimal Hugo project, and Markdown files with front matter and cross-references for Hugo. The generated files can be used by Hugo without any further steps:\nmodo init hugo # required only once to set up the project modo build hugo serve -s docs/site/ When using the default structure obtained from modo init hugo, the Hugo project resides under docs/site. However, Hugoâ€™s content folder docs/site/content is in .gitignore and only contains files generated by ModoðŸ§¯. All additional content files (like a user guide) should instead be placed under docs/src, as if this was the content folder. These files are processed for doc-tests. Besides that, the Hugo project can be used and modified as usual.\nTemplates can be used to customize the Hugo front matter of each page.\nHugo itself is extremely versatile and the provided setup is just a minimal suggestion that uses the Hextra theme. For a more customized documentation site (using Hextra as well), see the sources of this site.","mdbook#mdBook":"With format mdbook, ModoðŸ§¯ creates Markdown files as well as auxiliary files for mdBook. The generated files can be used by mdBook without any further steps:\nmodo init mdbook # required only once to set up the project modo build mdbook serve docs/ --open When using the default structure obtained from modo init mdbook, you can edit the mdBook configuration file book.toml under docs/\nNote that the mdBook format is more limited than Hugo, as it allows only for a single package and no auxiliary documentation files.","plain-markdown#Plain Markdown":"With format plain, ModoðŸ§¯ creates plain markdown files. This is ModoðŸ§¯â€™s default output format. The generated files are suitable for pushing to GitHub and GitHubâ€™s Markdown rendering.\nWhen using the default structure obtained from modo init plain, ModoðŸ§¯â€™s generated files are placed under docs/site, which is in .gitignore. All additional content files (like a user guide) should be placed under docs/src. As with the Hugo format, these files are processed for doc-tests."},"title":"Output formats"},"/modo/guide/install/":{"data":{"":"ModoðŸ§¯ offers different installation options.","precompiled-binaries#Precompiled binaries":"Pre-compiled binaries for manual installation are available in the Releases for Linux, Windows and MacOS.","using-go#Using Go":"With Go installed, you can install ModoðŸ§¯ like this:\ngo install github.com/mlange-42/modo@latest With Go, you can also install the latest development version:\ngo install github.com/mlange-42/modo@main ","using-pixi#Using Pixi":"Not supported yet. Help is appreciated, see issue #133.","using-python#Using Python":"ModoðŸ§¯ is available on PyPI as pymodo. Install it with pip:\npip install pymodo This installs the modo command. If the command is not found, try:\npython -m pymodo"},"title":"Installation"},"/modo/guide/setup/":{"data":{"":"The command init serves to prepare an existing MojoðŸ”¥ project for instant usage with ModoðŸ§¯ and a static site generator (SSG).","detected-packages#Detected packages":"These are the possible project layouts the init command can work with:\nroot src __init__.mojo root pkg_a src __init__.mojo root pkg_a __init__.mojo pkg_b __init__.mojo root src pkg_a __init__.mojo pkg_b __init__.mojo ","hugo-example#Hugo example":"As an example, we use Hugo as SSG. For all supported options, see chapter formats. Navigate into your MojoðŸ”¥ projectâ€™s root folder and run:\nmodo init hugo ModoðŸ§¯ analyzes the structure of your project and tries to find MojoðŸ”¥ packages. It then sets up a modo.yaml config file and a directory docs, containing a minimal Hugo project as well as sub-directories for auxiliary documentation files and extracted doc-tests.\nAfter that, you should be able to instantly generate your API docs with ModoðŸ§¯ and render them with Hugo:\nmodo build hugo serve -s docs/site/ If your project has a GitHub repository, ModoðŸ§¯ will set up the project so that it can be deployed to GitHub Pages instantly.\nFor more details, see the Hugo format.","mdbook-example#mdBook example":"Similarly, with mdBook as SSG, these three commands should be sufficient to view your API docs in a web browser:\nmodo init mdbook modo build mdbook serve docs/ For more details on the generated directory structure and files, see chapter formats."},"title":"Setup"},"/modo/mypkg/":{"data":{"aliases#Aliases":" MyIntAlias = Int: An example module alias. ","mypkg#\u003ccode\u003emypkg\u003c/code\u003e":"Mojo package ðŸ¡­\nmypkgPackage mypkg provides an example for ModoðŸ§¯ API docs.\nThe package has some re-exported dummy members (optional) as well as a subpkg. The docstring for the package looks like this:\n\"\"\" Package `example` provides an example for ModoðŸ§¯ API docs. The package has some re-exported dummy members (optional) as well as a [.subpkg]. The source code of the package looks like this: \u003ccode block excluded\u003e Exports: - mymodule.MyPair - mymodule.MyIntAlias - subpkg \"\"\" from .mymodule import MyPair, MyIntAlias ","packages#Packages":" subpkg: A sub-package. ","structs#Structs":" MyPair: A simple example struct. "},"title":"Example API docs"},"/modo/mypkg/MyPair-/":{"data":{"aliases#Aliases":" MyInt = Int: An example struct alias. Alias for MyIntAlias ","fields#Fields":" first (T): First struct field. second (T): Second struct field. ","implemented-traits#Implemented traits":"AnyType, UnknownDestructibility","methods#Methods":" âž•Â  âž– __init__ fn __init__(out self, first: T, second: T) Creates a new MyPair. Args:\nfirst (T): The value for MyPair.first. second (T): The value for MyPair.second. self (Self) Returns:\nSelf\ndump fn dump(self) Prints fields first and second. Args:\nself (Self) format fn format(self, fmt: String) -\u003e String Formats this MyPair. A longer description of the method, explaining how to use it.\nArgs:\nself (Self) fmt (String): Desired output format. Returns:\nString: A formatted string.\nRaises:\nWhen called with an unknown fmt argument.\nstatic_method @staticmethod fn static_method(self) Details Args:\nself (Self) ","mypair#\u003ccode\u003eMyPair\u003c/code\u003e":"Mojo struct ðŸ¡­\nMyPair @memory_only struct MyPair[T: Intable \u0026 Copyable] A simple example struct.\nThis struct is re-exported by its parent package, so shows up where the user expects it due to the import path. It has aliases, parameters, fields and methods.\nLinking to individual members is as easy as this:\nMethod: [.MyPair.dump], field: [.MyPair.first]. which gives:\nMethod: MyPair.dump, field: MyPair.first.","parameters#Parameters":" T (Intable \u0026 Copyable): The MyPairâ€™s element type. "},"title":"MyPair"},"/modo/mypkg/subpkg/":{"data":{"modules#Modules":" submodule: Module in subpkg. ","subpkg#\u003ccode\u003esubpkg\u003c/code\u003e":"Mojo package ðŸ¡­\nsubpkgA sub-package.\nExports submodule to include all its members. The docsting looks like this:\n\"\"\" A sub-package. Exports [.submodule] to include all its members. The docsting looks like this: \u003ccode block excluded\u003e Exports: - submodule \"\"\" "},"title":"subpkg"},"/modo/mypkg/subpkg/submodule/":{"data":{"functions#Functions":" simple_func overloaded_func ","submodule#\u003ccode\u003esubmodule\u003c/code\u003e":"Mojo module ðŸ¡­\nsubmoduleModule in subpkg.\nThis module is re-exported by subpkg, so all its members are included."},"title":"submodule"},"/modo/mypkg/subpkg/submodule/overloaded_func/":{"data":{"overloaded_func#\u003ccode\u003eoverloaded_func\u003c/code\u003e":"Mojo function ðŸ¡­\noverloaded_func âž•Â  âž– fn overloaded_func() An overloaded function, variant 1. fn overloaded_func(v: Int) An overloaded function, variant 2. Args:\nv (Int): Some argumentsâ€¦ fn overloaded_func(v: String) An overloaded function, variant 3. Args:\nv (String): Some argumentsâ€¦ "},"title":"overloaded_func"},"/modo/mypkg/subpkg/submodule/simple_func/":{"data":{"simple_func#\u003ccode\u003esimple_func\u003c/code\u003e":"Mojo function ðŸ¡­\nsimple_func âž•Â  âž– fn simple_func() A simple function. "},"title":"simple_func"}}